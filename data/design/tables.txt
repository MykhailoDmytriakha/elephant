**1. Определение ключевых концепций и контекста**

В основе представленной структуры лежит иерархия задач (tasks), где каждая задача может иметь подзадачи. Главное понятие — это древовидная модель данных, в которой у каждой записи может быть ноль или одна родительская задача (parent_task_id), а также множество дочерних. Данные о порядке (order) и уровне вложенности (sub_level) позволяют упорядочивать подзадачи и строить их логику отображения.

**2. Техническая архитектура или структура**

Рекомендуется использовать одну таблицу `task_metadata` со следующими полями:  
- `id` (PK, уникальный идентификатор, INT или UUID)  
- `title` или `name` (VARCHAR) — название задачи  
- `description` (TEXT) — опционально, описание задачи  
- `parent_task_metadata_id` (FK на `task_metadata.id`, допускающий NULL) — указывает на родительскую задачу, NULL, если задача — корневая  
- `order` (INT) — порядок задачи среди "соседей" одного уровня  
- `sub_level` (INT) — уровень вложенности (0 для верхнего уровня, 1 для подзадач и т.д.)  
- Дополнительные поля: например, `status` (VARCHAR), `due_date` (DATE), `created_at`/`updated_at` (TIMESTAMP)

И таблица `tasks` для хранения содержательных данных задачи (описание, статус, сроки и т.д.):
- `id` (PK) — уникальный идентификатор задачи.
- `title` (VARCHAR) — название задачи.
- `description` (TEXT) — описание задачи.
- `status` (VARCHAR) — статус (например, open, in_progress, done).
- `due_date` (DATE) — срок выполнения.
- `created_at`/`updated_at` — временные метки.

Таблица 1: task_metadata
```sql
CREATE TABLE task_metadata (
    id UUID PRIMARY KEY UNIQUE,
    parent_task_metadata_id UUID NULL,
    `order` INT NOT NULL,
    sub_level INT NOT NULL,
    status VARCHAR(50),
    due_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT fk_parent_task_metadata FOREIGN KEY (parent_task_metadata_id) REFERENCES task_metadata(id) ON DELETE CASCADE
);
```

Таблица 2: tasks
```sql
CREATE TABLE tasks (
    task_metadata_id UUID PRIMARY KEY UNIQUE,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    user_input TEXT,
    scope TEXT,
    ideal_final_result TEXT,
    CONSTRAINT fk_task_metadata FOREIGN KEY (task_metadata_id) REFERENCES task_metadata(id) ON DELETE CASCADE
);
```